---
kind: Template
apiVersion: v1
metadata:
  name: pgprimary
  creationTimestamp: 
  annotations:
    description: PostgreSQL Replication
    iconClass: icon-database
    tags: database,postgresql,replication
parameters:
- name: CCP_IMAGE_NAME
  desciption: Crunchy docker image name.
  value: crunchydata/crunchy-postgres
- name: CCP_IMAGE_TAG
  description: the image tag to use
- name: PG_PRIMARY_PORT
  description: The postgresql port
  value: '5432'
- name: PG_PRIMARY_USER
  description: The username used for primary / replica replication
- name: PG_DATABASE
  description: Postgresql Database 
- name: PG_PRIMARY_PASSWORD
  description: The password for the PG primary user
  value: 'master'
- name: PG_MODE
  description: The mode for the postgresql container
  value: primary
- name: PG_PRIMARY_SERVICE_NAME
  value: pgprimary
- name: PG_LOCALE
  description: Postgresql locale
- name: PG_USER
  description: Database runtime schema user
- name: NODE_LABEL
  description: The label of primary db node
- name: PG_PASSWORD
  description: pg user password
- name: PG_ROOT_PASSWORD
  description: root password
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    name: pgprimary
  spec:
    dockerImageRepository: "${CCP_IMAGE_NAME}"
    tags:
    - name: "${CCP_IMAGE_TAG}"
      annotations:
        description: Provides crunchy-pg
        iconClass: icon-database
        tags: database
        version: "${CCP_IMAGE_TAG}"
  status:
    dockerImageRepository: ""
- kind: Service
  apiVersion: v1
  metadata:
    name: ${PG_PRIMARY_SERVICE_NAME}
    labels:
      name: ${PG_PRIMARY_SERVICE_NAME}
  spec:
    ports:
    - name: postgres
      protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 0
    selector:
      name: ${PG_PRIMARY_SERVICE_NAME}
    type: ClusterIP
    sessionAffinity: None
- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: ${PG_PRIMARY_SERVICE_NAME}
    labels:
      name: ${PG_PRIMARY_SERVICE_NAME}
  spec:
    strategy:
      type: Recreate
      resources: {}
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      name: ${PG_PRIMARY_SERVICE_NAME}
    template:
      metadata:
        labels:
          name: ${PG_PRIMARY_SERVICE_NAME}
      spec:
        nodeSelector:
          purpose: ${NODE_LABEL}
        containers:
        - name: ${PG_PRIMARY_SERVICE_NAME}
          image: ${CCP_IMAGE_NAME}:${CCP_IMAGE_TAG}
          ports:
          - containerPort: 5432
            protocol: TCP
          env:
          - name: PG_MODE
            value: ${PG_MODE}
          - name: PG_PRIMARY_PORT
            value: ${PG_PRIMARY_PORT}
          - name: PG_PRIMARY_USER
            value: ${PG_PRIMARY_USER}
          - name: PG_PRIMARY_PASSWORD
            value: ${PG_PRIMARY_PASSWORD}
          - name: PG_PASSWORD
            value: ${PG_PASSWORD}
          - name: PG_USER
            value: ${PG_USER}
          - name: PG_DATABASE
            value: ${PG_DATABASE}
          - name: PG_ROOT_PASSWORD
            value: ${PG_ROOT_PASSWORD}
          - name: PG_LOCALE
            value: ${PG_LOCALE}
          - name: DBENV
            value: $DBENV
          - name: PGDATA
            value: "/pgdata"
          - name: PGDATA_PATH_OVERRIDE
            value: "message"
          terminationMessagePath: "/dev/termination-log"
          securityContext:
            privileged: false
            runAsUser: 26
            fsGroup: 26
            SupplementalGroups:
            - 26
          volumeMounts:
          - mountPath: "/pgdata"
            name: pgdata
            readOnly: false
          - mountPath: "/pgconf"
            name: database-conf
        serviceAccount: qlik
        serviceAccountName: qlik
        volumes:
        - name: pgdata
          hostPath:
            path: /var/postgres
        - name: database-conf
          configMap: 
            name: database-conf
            items: 
            - key: setup.sql
              path: setup.sql
            - key: postgresql.conf
              path: postgresql.conf
            - key: pg_hba.conf
              path: pg_hba.conf
    strategy:
      type: Rolling
      rollingUpdate:
        maxUnavailable: 1
        maxSurge: 1